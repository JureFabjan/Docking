#svl


const DEFAULTS = [nogaps:1]; // 1 => ignore gaps

//============================================================================
// main function
//============================================================================
function main[]

// Working directory
local working_dir = ArgvPull[['-d'], [1]];

cd working_dir;

local files = flist[[], '*.mdb'];

// Pairs of atoms to be checked
// [Ligand_atom, [Chain, Residue, Residue_number, Residue_atom]]
// USE NUMBERING THAT HAS THE FIRST RESIDUE COUNTED AS 1!!
local atoms_possible = [[
	[ 'C1', [1, 'GLY', 146, 'CA']],
	[ 'C3', [1, 'ALA', 149, 'CA']],
	[ 'N9', [2, 'GLY', 120, 'CA']],
	[ 'C15', [1, 'THR', 195, 'CA']],
	[ 'C13', [2, 'TYR', 119, 'CA']],
	['C17', [2, 'ILE', 35, 'CA']],
	['C7', [2, 'TYR',  53, 'CA']]
	]
];

// Setting up
local file, results, results_temp, chains, c_atoms, i, j;
local ligand_atom, residue, residue_atom;
local lig_atom, chain_num, res_name, res_num, res_atom;
local chain_residues, db_key, entries, read, entry_key;
local entry, atom_choice, first_atoms, atoms;

results(1) = swrite['File\t{|\t}', apt peek[atoms_possible(1), 1]];

i = 2;
for file in files loop
	// Open each file and open each entry in the DB
	db_key = db_Open[file, 'read'];
	entries = dbv_Entries[db_key];
	for entry_key in entries loop
		read = db_Read[db_key, entry_key];
		chains = mol_Create read(1)(2);
	
		// Extract the name of the entry
		results_temp = [read(1)(2)(1)(1)];
		c_atoms = cat cAtoms third chains;		
	
		print 'Checking the following structure:';
		print read(1)(2)(1)(1);
		
		// Getting the chain residues
		chain_residues = cResidues chains;
		
		// Defining which atom definitions are correct
		for atom_choice in atoms_possible loop
			first_atoms = c_atoms | aName c_atoms == atom_choice(1)(1);
			if length first_atoms then 
				atoms = atom_choice;
				break;
			endif;
		endloop;
	
		// Checking of the specified atom pairs
		j = 2;
		for [lig_atom, [chain_num, res_name, res_num, res_atom]] in atoms loop
			ligand_atom = c_atoms | aName c_atoms==lig_atom;
			residue = rAtoms chain_residues(chain_num) | (rName chain_residues(chain_num)==res_name) and (rNumber chain_residues(chain_num)==res_num);
			residue_atom = residue(1) | aName residue(1)==res_atom;
		
			results_temp(j) = aDist[ligand_atom, residue_atom];
			j = j+1;
		endloop;
	
		results(i) = swrite['{|\t}', results_temp];
		i = i+1;
	
		Close[force:1];
	
	endloop;
	
	dbv_Close[db_key];
	
endloop;

print 'Results:';
print results;

fwrite['Results.txt', '{|\n}', results];

endfunction

#eof